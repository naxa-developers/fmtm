# Copyright (c) 2022, 2023 Humanitarian OpenStreetMap Team
# This file is part of FMTM.
#
#     FMTM is free software: you can redistribute it and/or modify
#     it under the terms of the GNU General Public License as published by
#     the Free Software Foundation, either version 3 of the License, or
#     (at your option) any later version.
#
#     FMTM is distributed in the hope that it will be useful,
#     but WITHOUT ANY WARRANTY; without even the implied warranty of
#     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#     GNU General Public License for more details.
#
#     You should have received a copy of the GNU General Public License
#     along with FMTM.  If not, see <https:#www.gnu.org/licenses/>.
#

version: "3"

volumes:
  fmtm_data:
  fmtm_db_data:
  fmtm_logs:
  fmtm_images:
  fmtm_tiles:
  central_db_data:
  central_frontend:

networks:
  fmtm-net:
    name: fmtm-local

services:
  proxy:
    image: "ghcr.io/hotosm/fmtm/proxy:debug"
    build:
      context: nginx
      target: debug
      args:
        NGINX_TAG: "${NGINX_TAG:-1.25.2}"
    container_name: fmtm
    depends_on:
      api:
        condition: service_started
      ui:
        condition: service_started
      central:
        condition: service_started
        required: false
      central-ui:
        condition: service_completed_successfully
        required: false
      s3:
        condition: service_started
    volumes:
      - central_frontend:/usr/share/nginx/html/central
    ports:
      - ${FMTM_DEV_PORT:-7050}:80
    networks:
      - fmtm-net
    restart: "unless-stopped"

  api:
    image: "ghcr.io/hotosm/fmtm/backend:${TAG_OVERRIDE:-debug}"
    build:
      context: src/backend
      target: debug
      args:
        APP_VERSION: "${TAG_OVERRIDE:-debug}"
    container_name: fmtm-api
    # Uncomment these to debug with a terminal debugger like pdb
    # Then `docker attach fmtm_api` to debug
    # stdin_open: true
    # tty: true
    volumes:
      - fmtm_logs:/opt/logs
      - fmtm_images:/opt/app/images
      - fmtm_tiles:/opt/tiles
      - ./src/backend/pyproject.toml:/opt/pyproject.toml
      - ./src/backend/app:/opt/app
      - ./src/backend/tests:/opt/tests
      # - ../osm-fieldwork/osm_fieldwork:/home/appuser/.local/lib/python3.10/site-packages/osm_fieldwork
    depends_on:
      fmtm-db:
        condition: service_healthy
      central:
        condition: service_healthy
        required: false
      migrations:
        condition: service_completed_successfully
      s3:
        condition: service_started
    env_file:
      - .env
    ports:
      - "7052:8000"
    #   - "5678:5678" # Debugger port
    networks:
      - fmtm-net
    restart: "unless-stopped"

  ui:
    image: "ghcr.io/hotosm/fmtm/frontend:debug"
    build:
      context: src/frontend
      dockerfile: debug.dockerfile
    container_name: fmtm-ui
    depends_on:
      api:
        condition: service_started
    volumes:
      - ./src/frontend:/app
      - /app/node_modules/
    environment:
      - VITE_API_URL=http://api.${FMTM_DOMAIN}:${FMTM_DEV_PORT:-7050}
      - VITE_ODK_CENTRAL_URL=${ODK_CENTRAL_URL}
      - VITE_ODK_CENTRAL_USER=${ODK_CENTRAL_USER}
      - VITE_ODK_CENTRAL_PASSWD=${ODK_CENTRAL_PASSWD}
    ports:
      - "7051:7051"
    networks:
      - fmtm-net
    restart: "unless-stopped"

  central:
    profiles: ["", "central"]
    image: "ghcr.io/hotosm/fmtm/odkcentral:${ODK_CENTRAL_TAG:-v2023.4.0}"
    build:
      context: odkcentral/api
      args:
        ODK_CENTRAL_TAG: ${ODK_CENTRAL_TAG:-v2023.4.0}
    container_name: fmtm-central
    depends_on:
      central-db:
        condition: service_healthy
    environment:
      - DOMAIN=local
      - SYSADMIN_EMAIL=${ODK_CENTRAL_USER}
      - SYSADMIN_PASSWD=${ODK_CENTRAL_PASSWD}
      - HTTPS_PORT=${HTTPS_PORT:-443}
      - DB_HOST=${CENTRAL_DB_HOST:-central-db}
      - DB_USER=${CENTRAL_DB_USER:-odk}
      - DB_PASSWORD=${CENTRAL_DB_PASSWORD:-odk}
      - DB_NAME=${CENTRAL_DB_NAME:-odk}
      - DB_SSL=${DB_SSL:-null}
      - EMAIL_FROM=${ODK_CENTRAL_USER}
      - EMAIL_HOST=${EMAIL_HOST:-mail}
      - EMAIL_PORT=${EMAIL_PORT:-25}
      - EMAIL_SECURE=${EMAIL_SECURE:-false}
      - EMAIL_IGNORE_TLS=${EMAIL_IGNORE_TLS:-true}
      - EMAIL_USER=${EMAIL_USER:-''}
      - EMAIL_PASSWORD=${EMAIL_PASSWORD:-''}
      - OIDC_ENABLED=${OIDC_ENABLED:-false}
      - SENTRY_ORG_SUBDOMAIN=${SENTRY_ORG_SUBDOMAIN:-o130137}
      - SENTRY_KEY=${SENTRY_KEY:-3cf75f54983e473da6bd07daddf0d2ee}
      - SENTRY_PROJECT=${SENTRY_PROJECT:-1298632}
    # ports:
    #   - "8383:8383"
    networks:
      - fmtm-net
    restart: "unless-stopped"

  central-ui:
    # This service simply builds the frontend to a volume
    # accessible to the proxy, then shuts down
    profiles: ["central"]
    image: "ghcr.io/hotosm/fmtm/odkcentral-ui:${ODK_CENTRAL_TAG:-v2023.4.0}"
    build:
      context: odkcentral/ui
      args:
        ODK_CENTRAL_TAG: ${ODK_CENTRAL_TAG:-v2023.4.0}
    container_name: fmtm-central-ui
    volumes:
      - central_frontend:/frontend
    network_mode: none
    restart: "on-failure:2"

  s3:
    image: "docker.io/minio/minio:${MINIO_TAG:-RELEASE.2023-10-25T06-33-25Z}"
    container_name: fmtm-s3
    environment:
      MINIO_ROOT_USER: ${S3_ACCESS_KEY:-fmtm}
      MINIO_ROOT_PASSWORD: ${S3_SECRET_KEY:-somelongpassword}
      MINIO_VOLUMES: "/mnt/data"
      MINIO_BROWSER: "off"
    volumes:
      - fmtm_data:/mnt/data
    # ports:
    #   - 9000:9000
    networks:
      - fmtm-net
    command: minio server # --console-address ":9090"
    restart: "unless-stopped"
    healthcheck:
      test: curl --fail http://localhost:9000/minio/health/live || exit 1
      start_period: 5s
      interval: 5s
      timeout: 5s
      retries: 3

  fmtm-db:
    image: "postgis/postgis:${POSTGIS_TAG:-14-3.4-alpine}"
    container_name: fmtm-db
    volumes:
      - fmtm_db_data:/var/lib/postgresql/data/
    environment:
      - POSTGRES_USER=${FMTM_DB_USER:-fmtm}
      - POSTGRES_PASSWORD=${FMTM_DB_PASSWORD:-fmtm}
      - POSTGRES_DB=${FMTM_DB_NAME:-fmtm}
    ports:
      - "5438:5432"
    networks:
      - fmtm-net
    restart: "unless-stopped"
    healthcheck:
      test: pg_isready -U ${FMTM_DB_USER:-fmtm} -d ${FMTM_DB_NAME:-fmtm}
      start_period: 5s
      interval: 10s
      timeout: 5s
      retries: 3

  central-db:
    profiles: ["", "central"]
    image: "postgis/postgis:${POSTGIS_TAG:-14-3.4-alpine}"
    container_name: fmtm-central-db
    volumes:
      - central_db_data:/var/lib/postgresql/data/
    environment:
      - POSTGRES_USER=${CENTRAL_DB_USER:-odk}
      - POSTGRES_PASSWORD=${CENTRAL_DB_PASSWORD:-odk}
      - POSTGRES_DB=${CENTRAL_DB_NAME:-odk}
    ports:
      - "5434:5432"
    networks:
      - fmtm-net
    restart: "on-failure:3"
    healthcheck:
      test: pg_isready -U ${CENTRAL_DB_USER:-odk} -d ${CENTRAL_DB_NAME:-odk}
      start_period: 5s
      interval: 10s
      timeout: 5s
      retries: 3

  migrations:
    image: "ghcr.io/hotosm/fmtm/backend:${TAG_OVERRIDE:-debug}"
    container_name: fmtm-migrations
    depends_on:
      fmtm-db:
        condition: service_healthy
      s3:
        condition: service_healthy
    env_file:
      - .env
    networks:
      - fmtm-net
    entrypoint: ["/migrate-entrypoint.sh"]
    restart: "on-failure:3"
    healthcheck:
      test: [] # Set the health check test to an empty value to disable it
